#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
CASSH CLI

Copyright 2017-2022 Nicolas BEGUIER
Licensed under the Apache License, Version 2.0
Written by Nicolas BEGUIER (nicolas_beguier@hotmail.com)

"""

# Standard library imports
from __future__ import print_function
from argparse import ArgumentParser
from datetime import datetime
from getpass import getpass
from json import dumps, loads
from os import chmod, getenv
from os.path import isfile
from re import compile as re_compile
from shutil import copyfile
import sys

# Third party library imports
from configparser import ConfigParser, NoOptionError, NoSectionError
from requests import Session
from requests.exceptions import ConnectionError, ReadTimeout

# Debug
# from pdb import set_trace as st

VERSION = '%(prog)s 1.8.1'

PATTERN_USERNAME = re_compile("^([a-z]+)$")

def print_result(result):
    """ Display result """
    date_formatted = datetime.strptime(result['expiration'], '%Y-%m-%d %H:%M:%S')
    is_expired = date_formatted < datetime.now()
    if result['status'] == 'ACTIVE':
        if is_expired and date_formatted.year == 1970:
            result['status'] = 'NEVER SIGNED'
        elif is_expired:
            result['status'] = 'EXPIRED'
        else:
            result['status'] = 'SIGNED'
    print(dumps(result, indent=4, sort_keys=True))

def read_conf(conf_path):
    """
    Read CASSH configuration file and return metadata.
    """
    config = ConfigParser()
    config.read(conf_path)
    user_metadata = {}
    try:
        user_metadata['name'] = config.get('user', 'name')
        user_metadata['key_path'] = config.get('user', 'key_path')\
        .replace('~', getenv('HOME'))
        user_metadata['key_signed_path'] = config.get('user', 'key_signed_path')\
        .replace('~', getenv('HOME'))
        user_metadata['url'] = config.get('user', 'url')
    except NoOptionError as error_msg:
        print('Can\'t read configuration file...')
        print(error_msg)
        sys.exit(1)

    if not config.has_option('user', 'timeout'):
        user_metadata['timeout'] = 2
    else:
        user_metadata['timeout'] = int(config.get('user', 'timeout'))

    if not config.has_option('user', 'verify'):
        user_metadata['verify'] = True
    else:
        user_metadata['verify'] = bool(config.get('user', 'verify') != 'False')

    if user_metadata['key_path'] == user_metadata['key_signed_path']:
        print('You should put a different path for key_path and key_signed_path.')
        sys.exit(1)

    try:
        user_metadata['auth'] = 'ldap'
        user_metadata['realname'] = config.get('ldap', 'realname')
    except NoOptionError as error_msg:
        print('Can\'t read configuration file...')
        print(error_msg)
        sys.exit(1)
    except NoSectionError:
        user_metadata['auth'] = None
        user_metadata['realname'] = None

    try:
        user_metadata['ldap_enable'] = bool(config.get('ldap', 'enable') != 'False')
    except NoOptionError:
        user_metadata['ldap_enable'] = True
    except NoSectionError:
        user_metadata['ldap_enable'] = False

    if not isfile(user_metadata['key_path']):
        print('File %s doesn\'t exists' % user_metadata['key_path'])
        sys.exit(1)

    return user_metadata

def get_set_value(arguments):
    """
    Returns the chosen value of 'set' action
    """
    if arguments.add_principals:
        return 'add', arguments.add_principals
    if arguments.remove_principals:
        return 'remove', arguments.remove_principals
    if arguments.update_principals:
        return 'update', arguments.update_principals
    if arguments.purge_principals:
        return 'purge', arguments.purge_principals
    return 'deprecated', arguments.set

class CASSH(object):
    """
    Main CASSH class.
    """
    def __init__(self, user_metadata):
        """
        Init file.
        """
        self.session = Session()
        self.auth = user_metadata['auth']
        self.key_path = user_metadata['key_path']
        self.name = user_metadata['name']
        self.realname = user_metadata['realname']
        self.user_metadata = user_metadata
        self.user_metadata['headers'] = {
            'User-Agent': 'CASSH-CLIENT v%s' % VERSION.split(' ')[1],
            'CLIENT_VERSION': VERSION.split(' ')[1],
        }

    ########################
    ## REQUESTS FUNCTIONS ##
    ########################

    def delete(self, uri, data):
        """
        Rebuilt DELETE function for CASSH purpose
        """
        try:
            req = self.session.delete(self.user_metadata['url'] + uri,
                                      data=data,
                                      headers=self.user_metadata['headers'],
                                      timeout=self.user_metadata['timeout'],
                                      verify=self.user_metadata['verify'])
        except ConnectionError:
            print('Connection error : %s' % self.user_metadata['url'])
            sys.exit(1)
        except ReadTimeout as err_msg:
            print('Timeout : %s' % err_msg)
            sys.exit(1)
        return req

    def get(self, uri):
        """
        Rebuilt GET function for CASSH purpose
        """
        try:
            req = self.session.get(self.user_metadata['url'] + uri,
                                   headers=self.user_metadata['headers'],
                                   timeout=self.user_metadata['timeout'],
                                   verify=self.user_metadata['verify'])
        except ConnectionError:
            print('Connection error : %s' % self.user_metadata['url'])
            sys.exit(1)
        except ReadTimeout as err_msg:
            print('Timeout : %s' % err_msg)
            sys.exit(1)
        return req

    def patch(self, uri, data):
        """
        Rebuilt PATCH function for CASSH purpose
        """
        try:
            req = self.session.patch(self.user_metadata['url'] + uri,
                                     data=data,
                                     headers=self.user_metadata['headers'],
                                     timeout=self.user_metadata['timeout'],
                                     verify=self.user_metadata['verify'])
        except ConnectionError:
            print('Connection error : %s' % self.user_metadata['url'])
            sys.exit(1)
        except ReadTimeout as err_msg:
            print('Timeout : %s' % err_msg)
            sys.exit(1)
        return req

    def post(self, uri, data):
        """
        Rebuilt POST function for CASSH purpose
        """
        try:
            req = self.session.post(self.user_metadata['url'] + uri,
                                    data=data,
                                    headers=self.user_metadata['headers'],
                                    timeout=self.user_metadata['timeout'],
                                    verify=self.user_metadata['verify'])
        except ConnectionError:
            print('Connection error : %s' % self.user_metadata['url'])
            sys.exit(1)
        except ReadTimeout as err_msg:
            print('Timeout : %s' % err_msg)
            sys.exit(1)
        return req

    def put(self, uri, data):
        """
        Rebuilt PUT function for CASSH purpose
        """
        try:
            req = self.session.put(self.user_metadata['url'] + uri,
                                   data=data,
                                   headers=self.user_metadata['headers'],
                                   timeout=self.user_metadata['timeout'],
                                   verify=self.user_metadata['verify'])
        except ConnectionError:
            print('Connection error : %s' % self.user_metadata['url'])
            sys.exit(1)
        except ReadTimeout as err_msg:
            print('Timeout : %s' % err_msg)
            sys.exit(1)
        return req

    ########################
    ##   MAIN FUNCTIONS   ##
    ########################

    def get_data(self, prefix=None):
        """
        Return data for a POST request.
        """
        data = {}
        passwd_message = 'Please type your LDAP password (user=%s): ' % self.realname
        if self.user_metadata['ldap_enable']:
            data.update({'password': getpass(passwd_message)})
        if self.auth == 'ldap':
            data.update({'realname': self.realname})
        if prefix is not None:
            data.update(prefix)
        return data

    def admin(self, username, action, set_value, search_value):
        """
        Admin CLI
        """
        if PATTERN_USERNAME.match(username) is None:
            print('Username not valid')
            sys.exit(1)
        payload = self.get_data()
        if action == 'revoke':
            payload.update({'revoke': True})
            req = self.post('/admin/' + username, payload)
        elif action == 'active':
            req = self.post('/admin/' + username, payload)
        elif action == 'delete':
            req = self.delete('/admin/' + username, payload)
        elif action == 'set':
            if set_value[0] == 'deprecated':
                set_value_dict = {}
                set_value_dict[set_value[1].split('=')[0]] = set_value[1].split('=')[1]
                payload.update(set_value_dict)
                req = self.patch('/admin/' + username, payload)
            else:
                payload.update({set_value[0]: set_value[1]})
                req = self.post('/admin/' + username + '/principals', payload)
        elif action == 'search':
            payload.update({'filter': search_value})
            req = self.post('/admin/all/principals/search', payload)
        elif action == 'status':
            payload.update({'status': True})
            req = self.post('/admin/' + username, payload)
            try:
                result = loads(req.text)
            except ValueError:
                print(req.text)
                return
            if result == {}:
                print(dumps(result, indent=4, sort_keys=True))
                return
            if username == 'all':
                for user in result:
                    print_result(result[user])
                return
            print_result(result)
            return
        else:
            print('Action should be : active, delete, revoke, set, search, status')
            sys.exit(1)
        print(req.text)

    def add(self):
        """
        Add a public key.
        """
        payload = self.get_data()
        with open('%s.pub' % self.key_path, 'r') as pubkey:
            payload.update({'pubkey': pubkey.read()})
        payload.update({'username': self.name})
        req = self.put('/client', payload)
        print(req.text)

    def sign(self, do_write_on_disk, force=False):
        """
        Sign a public key.
        """
        payload = self.get_data()
        with open('%s.pub' % self.key_path, 'r') as pubkey:
            payload.update({'pubkey': pubkey.read()})
        payload.update({'username': self.name})
        if force:
            payload.update({'admin_force': True})
        req = self.post('/client', payload)
        if not 'ssh-' in req.text and not 'ecdsa-' in req.text:
            print(req.text)
            sys.exit(1)
        if do_write_on_disk:
            key_signed_path = self.user_metadata['key_signed_path']
            copyfile(self.key_path, key_signed_path)
            chmod(key_signed_path, 0o600)
            with open('%s.pub' % key_signed_path, 'w+') as pubkey_signed:
                pubkey_signed.write(req.text)
            print('Public key successfuly signed')
        else:
            print(req.text)

    def status(self):
        """
        Get status of public key.
        """
        payload = self.get_data()
        req = self.post('/client/status', payload)
        try:
            result = loads(req.text)
        except ValueError:
            print(req.text)
            return
        if result == {}:
            print(dumps(result, indent=4, sort_keys=True))
            return
        print_result(result)

    def get_ca(self):
        """
        Get CA public key.
        """
        req = self.get('/ca')
        print(req.text)

    def get_krl(self):
        """
        Get CA KRL.
        """
        req = self.get('/krl')
        print(req.text)


if __name__ == '__main__':

    PARSER = ArgumentParser()

    SUBPARSERS = PARSER.add_subparsers(help='commands')

    PARSER.add_argument('--version', action='version', version=VERSION)

    # ADMIN Arguments
    ADMIN_PARSER = SUBPARSERS.add_parser('admin',\
        help='Administrator command : active, delete, revoke, set, search, status keys')
    ADMIN_PARSER.add_argument('username', action='store',\
        help='Username of client\'s key, if username is \'all\' status return all users')
    ADMIN_PARSER.add_argument('action', action='store',\
        help='Choice between : active, delete, revoke, set, search, status keys')
    ADMIN_PARSER.add_argument('-s', '--set', action='store',\
        help='CAUTION: Set value of a user.')
    ADMIN_PARSER.add_argument('--add-principals', action='store',\
        help='Add a list of principals to a user, should be separated by comma without spaces.')
    ADMIN_PARSER.add_argument('--remove-principals', action='store',\
        help='Remove a list of principals to a user, should be separated by comma without spaces.')
    ADMIN_PARSER.add_argument('--purge-principals', action='store_true',\
        help='Purge all principals to a user.')
    ADMIN_PARSER.add_argument('--update-principals', action='store',\
        help='Update all principals to a user by the given principals, \
        should be separated by comma without spaces.')
    ADMIN_PARSER.add_argument('--principals-filter', action='store',\
        help='Look for users by the given principals filter, \
        should be separated by comma without spaces.')

    # ADD Arguments
    ADD_PARSER = SUBPARSERS.add_parser('add', help='Add a key to remote ssh ca server.')

    # SIGN Arguments
    SIGN_PARSER = SUBPARSERS.add_parser('sign', help='Sign its key by remote ssh ca server.')
    SIGN_PARSER.add_argument('-d', '--display-only', action='store_true',\
        help='Display key in shell only.')
    SIGN_PARSER.add_argument('-f', '--force', action='store_true',\
        help='Admin can force signature if server enable it.')

    # STATUS Arguments
    STATUS_PARSER = SUBPARSERS.add_parser('status',\
        help='Display key current status on remote ssh ca server.')

    # CA Arguments
    CA_PARSER = SUBPARSERS.add_parser('ca',\
        help='Display CA public key.')

    # KRL Arguments
    KRL_PARSER = SUBPARSERS.add_parser('krl',\
        help='Display CA KRL.')

    ARGS = PARSER.parse_args()

    CONF_FILE = '%s/.cassh' % getenv('HOME')

    if not isfile(CONF_FILE):
        print('Config file missing : %s' % CONF_FILE)
        print('Example:')
        print('[user]')
        print('# name : this is the username you will use to log on every server')
        print('name = user')
        print('# key_path: This key path won\'t be used to log in, a copy will be made.')
        print('# We assume that `${key_path}` exists and `${key_path}.pub` as well.')
        print('# WARNING: Never delete these keys')
        print('key_path = ~/.ssh/id_rsa')
        print('# key_signed_path: Every signed key via cassh will be put in this path.')
        print('# At every sign, `${key_signed_path}` and `${key_signed_path}.pub` will be created')
        print('key_signed_path = ~/.ssh/id_rsa-cert')
        print('# url : URL of cassh server-side backend.')
        print('url = https://cassh.net')
        print('# [OPTIONNAL] timeout : requests timeout parameter in second. (timeout=2)')
        print('# timeout = 2')
        print('# [OPTIONNAL] verify : verifies SSL certificates for HTTPS requests. (verify=True)')
        print('# verify = True')
        print('')
        print('[ldap]')
        print('# realname : this is the LDAP/AD login user')
        print('realname = ursula.ser@domain.fr')
        print('enable = True')
        sys.exit(1)

    CLIENT = CASSH(read_conf(CONF_FILE))

    if len(sys.argv) == 1:
        PARSER.print_help()
        sys.exit(1)

    if sys.argv[1] == 'add':
        CLIENT.add()
    elif sys.argv[1] == 'sign':
        CLIENT.sign(not ARGS.display_only, force=ARGS.force)
    elif sys.argv[1] == 'status':
        CLIENT.status()
    elif sys.argv[1] == 'ca':
        CLIENT.get_ca()
    elif sys.argv[1] == 'krl':
        CLIENT.get_krl()
    elif sys.argv[1] == 'admin':
        CLIENT.admin(
            ARGS.username,
            ARGS.action,
            get_set_value(ARGS),
            ARGS.principals_filter)
    else:
        PARSER.print_help()
        sys.exit(1)

    sys.exit(0)
